import { NextRequest, NextResponse } from "next/server";
import { dbPool } from "@/utils/dbUtil";

export const dynamic = "force-dynamic";

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const reportTypeId = searchParams.get("report_type_id");

    let query = `
      SELECT 
        t.id,
        t.report_type_id,
        t.template_name,
        t.template_config,
        t.created_at,
        rt.name as report_type_name
      FROM report_templates t
      LEFT JOIN report_types rt ON t.report_type_id = rt.id
      WHERE 1=1
    `;

    const queryParams: any[] = [];
    let paramIndex = 1;

    if (reportTypeId) {
      query += ` AND t.report_type_id = $${paramIndex}`;
      queryParams.push(reportTypeId);
      paramIndex++;
    }

    query += ` ORDER BY t.template_name`;

    console.log("Templates query:", query);
    console.log("Query params:", queryParams);

    const result = await dbPool.query(query, queryParams);

    if (result.rowCount === 0 && reportTypeId) {
      await createDefaultTemplate(reportTypeId);

      const newResult = await dbPool.query(query, queryParams);
      return NextResponse.json(newResult.rows);
    }

    return NextResponse.json(result.rows);
  } catch (error) {
    console.error("Error fetching report templates:", error);
    return NextResponse.json(
      { error: "Failed to fetch report templates" },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const { report_type_id, template_name, template_config } =
      await request.json();

    const templateId = crypto.randomUUID();

    const query = `
      INSERT INTO report_templates (
        id, 
        report_type_id, 
        template_name, 
        template_config
      ) VALUES ($1, $2, $3, $4)
      RETURNING *
    `;

    const result = await dbPool.query(query, [
      templateId,
      report_type_id,
      template_name,
      JSON.stringify(template_config),
    ]);

    return NextResponse.json({
      success: true,
      template: result.rows[0],
    });
  } catch (error) {
    console.error("Error creating report template:", error);
    return NextResponse.json(
      { error: "Failed to create report template" },
      { status: 500 }
    );
  }
}

async function createDefaultTemplate(reportTypeId: string) {
  try {
    const defaultTemplates = {
      "system-all-data": {
        template_name: "Standard System Report",
        template_config: {
          layout: "standard",
          colors: {
            primary: "#2563eb",
            secondary: "#64748b",
            accent: "#059669",
          },
          table_style: "striped",
          page_size: "A4",
          orientation: "portrait",
          date_format: "MM/DD/YYYY",
          header_format: "WatchLog System Report",
          footer_format: "Generated by WatchLog System",
        },
      },
      "maintenance-all-data": {
        template_name: "Standard Maintenance Report",
        template_config: {
          layout: "detailed",
          colors: {
            primary: "#dc2626",
            secondary: "#64748b",
            accent: "#ea580c",
          },
          table_style: "bordered",
          page_size: "A4",
          orientation: "portrait",
        },
      },
      "production-all-data": {
        template_name: "Standard Production Report",
        template_config: {
          layout: "compact",
          colors: {
            primary: "#059669",
            secondary: "#64748b",
            accent: "#0d9488",
          },
          table_style: "simple",
          page_size: "A4",
          orientation: "landscape",
        },
      },
      "general-all-data": {
        template_name: "Standard General Report",
        template_config: {
          layout: "standard",
          colors: {
            primary: "#7c3aed",
            secondary: "#64748b",
            accent: "#8b5cf6",
          },
          table_style: "striped",
          page_size: "A4",
          orientation: "portrait",
        },
      },
    };

    const template =
      defaultTemplates[reportTypeId as keyof typeof defaultTemplates];
    if (template) {
      const templateId = crypto.randomUUID();
      await dbPool.query(
        `
        INSERT INTO report_templates (
          id, 
          report_type_id, 
          template_name, 
          template_config
        ) VALUES ($1, $2, $3, $4)
      `,
        [
          templateId,
          reportTypeId,
          template.template_name,
          JSON.stringify(template.template_config),
        ]
      );
    }
  } catch (error) {
    console.error("Error creating default template:", error);
  }
}
